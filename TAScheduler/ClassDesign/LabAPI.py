from typing import Optional, Union, List

from TAScheduler.models import User, Section
from TAScheduler.models import Lab


class LabAPI:

    @staticmethod
    def create(
            code: str,
            section: Section,
            day: str = '',
            time: str = '',
            ta: Optional[User] = None,
    ) -> int:
        """
        Create Lab section with a lab_section code and the Course Section to which it is associated.
        lab_section_id is autogenerated
        """

        if day not in ['M', 'T', 'W', 'H', 'F']:
            raise TypeError('Labs can only be set to exactly on day from [M, T, W, H, F]')

        # TODO handle existing section with id gracefully
        new_lab = Lab.objects.create(
            code=code,
            section=section,
            day=day,
            time=time,
            ta=ta
        )
        return new_lab.id

    @staticmethod
    def get_by_id(lab_id: int) -> Optional[Lab]:
        """
        Using the autogenerated primary key id; returns a LabSection object, if it exists
        """
        return Lab.objects.get(id=lab_id)

    @staticmethod
    def get_for_section_id(section_id: int) -> List[Lab]:
        """
        Returns all LabSection objects associated with a specific Section id, if any exist.
        If not returns an empty list
        """
        return list(Lab.objects.filter(section_id=section_id))


    @staticmethod
    def edit_by_id(
            lab_id: int,
            new_day: Optional[str] = None,
            new_time: Optional[str] = None,
            new_ta: Optional[User] = None,
    ) -> None:
        """
        Using the id primary key of the lab, updates lab_days, lab_time, and ta_id, if it exists
        """
        lab = Lab.objects.get(id=lab_id)
        lab.day = new_day
        lab.time = new_time
        lab.ta = new_ta
        lab.save()


    @staticmethod
    def delete_by_id(
          lab_id: int
    ) -> None:
        """
        Using the lab_section id primary key, deletes user if it exists.
        """
        Lab.objects.get(id=lab_id).delete()
