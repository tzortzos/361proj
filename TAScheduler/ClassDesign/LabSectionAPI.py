from typing import Optional, Union

from TAScheduler.models import User, CourseSection
from TAScheduler.models import LabSection


class LabSectionAPI:

    @staticmethod
    def create_lab_section(
            lab_section_code: str,
            course_section_id: CourseSection,
            lab_days: str = '',
            lab_time: str = '',
            ta_id: User = None,
    ) -> int:
        """
        Create Lab section with a lab_section code and the Course Section to which it is associated.
        lab_section_id is autogenerated
        """
        pass

    @staticmethod
    def get_lab_section_by_lab_id(lab: int) -> Optional[LabSection]:
        """
        Using the autogenerated primary key lab_section_id; returns a LabSection object, if it exists
        """
        pass

    @staticmethod
    def get_all_lab_sections_from_course_section_and_course(course_section_id: int) -> list[LabSection]:
        """
        Returns all LabSection objects associated with a specific course section id, if any exist
        """
        pass

    @staticmethod
    def edit_lab_section(
            lab_section: int,
            lab_days: str,
            lab_time: str,
            ta_id: User
            ,
    ) -> str:
        """
        Using the lab_secton_id primary key of the lab, updates lab_days, lab_time, and ta_id, if it exists
        """
        pass

    @staticmethod
    def delete_lab_section(
          lab_section: int
    ) -> str:
        """
        Using the lab_section id primary key, deletes user if it exists.
        """
        pass