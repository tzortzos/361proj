from typing import Optional, Union, List, Iterable

from TAScheduler.models import User, Section
from TAScheduler.models import Lab


class LabSectionAPI:

    @staticmethod
    def create_lab_section(
            lab_section_code: str,
            course_section_id: Section,
            lab_day: str = '',
            lab_time: str = '',
            ta_id: User = None,
    ) -> int:
        """
        Create Lab section with a lab_section code and the Course Section to which it is associated.
        lab_section_id is autogenerated
        """
        if lab_section_code == '' or course_section_id == None:
            raise TypeError("Lab code and Course Section cannot be blank.")
        new_lab_section = Lab.objects.create(
            code=lab_section_code,
            section=course_section_id,
            day=lab_day,
            time=lab_time,
            ta=ta_id
        )
        return new_lab_section.id

    @staticmethod
    def get_lab_section_by_lab_id(lab: int) -> Optional[Lab]:
        """
        Using the autogenerated primary key lab_section_id; returns a LabSection object, if it exists
        """
        try:
            return Lab.objects.get(id=lab)
        except Lab.DoesNotExist:
            return None

    @staticmethod
    def get_all_lab_sections_for_course_section(course_section: Section) -> Iterable[Lab]:
        """
        Returns all LabSection objects associated with a specific course section id, if any exist
        """
        return Lab.objects.filter(section=course_section)


    @staticmethod
    def edit_lab_section(
            lab_section: int,
            day: Optional[str]= None,
            time: Optional[str]=None,
            ta: Optional[User]=None
    ) -> None:
        """
        Using the lab_secton_id primary key of the lab, updates lab_days, lab_time, and ta_id, if it exists
        """
        lab = Lab.objects.get(id=lab_section)
        lab.day = day
        lab.time = time
        lab.ta = ta
        lab.save()


    @staticmethod
    def delete_lab_section(
          lab_section: int
    ) -> bool:
        """
        Using the lab_section id primary key, deletes user if it exists.
        """
        try:
            Lab.objects.get(id=lab_section).delete()
            return True
        except Lab.DoesNotExist:
            return False


